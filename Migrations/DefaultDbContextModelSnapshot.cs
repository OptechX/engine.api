// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.engine_v2.Data;

#nullable disable

namespace api.enginev2.Migrations
{
    [DbContext(typeof(DefaultDbContext))]
    partial class DefaultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.engine_v2.Models.Engine.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationCategory")
                        .HasColumnType("integer")
                        .HasColumnName("application_category");

                    b.Property<string>("Copyright")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("copyright");

                    b.Property<string[]>("CpuArch")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("cpu_arch");

                    b.Property<string>("Docs")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("docs");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Homepage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("homepage");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("LastUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_update");

                    b.Property<string[]>("Lcid")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("lcid");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license");

                    b.Property<bool>("LicenseAcceptRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("license_accept_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publisher");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_applications");

                    b.ToTable("applications", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.ApplicationCategoryIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.HasKey("Id")
                        .HasName("pk_application_category_indices");

                    b.ToTable("application_category_indices", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.ApplicationPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AbsoluteUri")
                        .HasColumnType("text")
                        .HasColumnName("absolute_uri");

                    b.Property<string>("CpuArch")
                        .HasColumnType("text")
                        .HasColumnName("cpu_arch");

                    b.Property<string[]>("DependsOn")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("depends_on");

                    b.Property<string>("DetectScript")
                        .HasColumnType("text")
                        .HasColumnName("detect_script");

                    b.Property<string>("DetectValue")
                        .HasColumnType("text")
                        .HasColumnName("detect_value");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("DisplayPublisher")
                        .HasColumnType("text")
                        .HasColumnName("display_publisher");

                    b.Property<string>("DisplayVersion")
                        .HasColumnType("text")
                        .HasColumnName("display_version");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Executable")
                        .HasColumnType("text")
                        .HasColumnName("executable");

                    b.Property<int?>("ExploitReportId")
                        .HasColumnType("integer")
                        .HasColumnName("exploit_report_id");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<string>("FollowUri")
                        .HasColumnType("text")
                        .HasColumnName("follow_uri");

                    b.Property<string>("InstallArgs")
                        .HasColumnType("text")
                        .HasColumnName("install_args");

                    b.Property<string>("InstallCmd")
                        .HasColumnType("text")
                        .HasColumnName("install_cmd");

                    b.Property<string>("InstallScript")
                        .HasColumnType("text")
                        .HasColumnName("install_script");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("text")
                        .HasColumnName("last_update");

                    b.Property<string>("Lcid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lcid");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("locale");

                    b.Property<string>("PackageDetection")
                        .HasColumnType("text")
                        .HasColumnName("package_detection");

                    b.Property<bool>("RebootRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("reboot_required");

                    b.Property<string>("Sha256")
                        .HasColumnType("text")
                        .HasColumnName("sha256");

                    b.Property<string>("TransferMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transfer_method");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("UninstallArgs")
                        .HasColumnType("text")
                        .HasColumnName("uninstall_args");

                    b.Property<string>("UninstallCmd")
                        .HasColumnType("text")
                        .HasColumnName("uninstall_cmd");

                    b.Property<string>("UninstallProcess")
                        .HasColumnType("text")
                        .HasColumnName("uninstall_process");

                    b.Property<string>("UninstallScript")
                        .HasColumnType("text")
                        .HasColumnName("uninstall_script");

                    b.Property<string>("UriPath")
                        .HasColumnType("text")
                        .HasColumnName("uri_path");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<int?>("VirusTotalScanResultsId")
                        .HasColumnType("integer")
                        .HasColumnName("virus_total_scan_results_id");

                    b.HasKey("Id")
                        .HasName("pk_application_packages");

                    b.ToTable("application_packages", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.AppxProvisionedPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("Arch")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("arch");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string[]>("Lcid")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("lcid");

                    b.Property<string[]>("SupportedWindowsEditions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_editions");

                    b.Property<string[]>("SupportedWindowsReleases")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_releases");

                    b.Property<string[]>("SupportedWindowsVersions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_versions");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_appx_provisioned_packages");

                    b.ToTable("appx_provisioned_packages", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.BaseImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseImageFileType")
                        .HasColumnType("text")
                        .HasColumnName("base_image_file_type");

                    b.Property<string>("CpuArch")
                        .HasColumnType("text")
                        .HasColumnName("cpu_arch");

                    b.Property<string[]>("Edition")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("edition");

                    b.Property<bool>("Fido")
                        .HasColumnType("boolean")
                        .HasColumnName("fido");

                    b.Property<string>("Locale")
                        .HasColumnType("text")
                        .HasColumnName("locale");

                    b.Property<string>("Release")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release");

                    b.Property<string>("Sha256")
                        .HasColumnType("text")
                        .HasColumnName("sha256");

                    b.Property<int>("SizeMB")
                        .HasColumnType("integer")
                        .HasColumnName("size_mb");

                    b.Property<string>("TransferMethod")
                        .HasColumnType("text")
                        .HasColumnName("transfer_method");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<string[]>("WindowsLcid")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("windows_lcid");

                    b.HasKey("Id")
                        .HasName("pk_base_images");

                    b.ToTable("base_images", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.BaseImageFileTypeIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_type");

                    b.HasKey("Id")
                        .HasName("pk_base_image_file_type_indices");

                    b.ToTable("base_image_file_type_indices", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BiosVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bios_version");

                    b.Property<bool>("CloudDeploySupport")
                        .HasColumnType("boolean")
                        .HasColumnName("cloud_deploy_support");

                    b.Property<string[]>("CpuArch")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("cpu_arch");

                    b.Property<string>("CspName")
                        .HasColumnType("text")
                        .HasColumnName("csp_name");

                    b.Property<string>("CspVersion")
                        .HasColumnType("text")
                        .HasColumnName("csp_version");

                    b.Property<int?>("ExploitReportId")
                        .HasColumnType("integer")
                        .HasColumnName("exploit_report_id");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("text")
                        .HasColumnName("last_update");

                    b.Property<bool>("Latest")
                        .HasColumnType("boolean")
                        .HasColumnName("latest");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("OEMInstallClass")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("oem_install_class");

                    b.Property<string>("OriginalEquipmentManufacturer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_equipment_manufacturer");

                    b.Property<string>("OutFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("out_file");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("integer")
                        .HasColumnName("production_year");

                    b.Property<string>("ScriptInstall")
                        .HasColumnType("text")
                        .HasColumnName("script_install");

                    b.Property<string[]>("SupportedWindowsVersion")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_version");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.Property<string>("UrlVTScan")
                        .HasColumnType("text")
                        .HasColumnName("url_vt_scan");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<string>("WindowsRelease")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("windows_release");

                    b.Property<string>("WmiObjectCaption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wmi_object_caption");

                    b.Property<string>("WmiObjectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wmi_object_name");

                    b.Property<string>("WmiObjectVendor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wmi_object_vendor");

                    b.Property<string>("WmiObjectVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("wmi_object_version");

                    b.Property<bool?>("aarch32")
                        .HasColumnType("boolean")
                        .HasColumnName("aarch32");

                    b.Property<bool?>("arm64")
                        .HasColumnType("boolean")
                        .HasColumnName("arm64");

                    b.Property<bool>("x64")
                        .HasColumnType("boolean")
                        .HasColumnName("x64");

                    b.Property<bool>("x86")
                        .HasColumnType("boolean")
                        .HasColumnName("x86");

                    b.HasKey("Id")
                        .HasName("pk_drivers");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.DriverCore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("CpuArch")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("cpu_arch");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("OriginalEquipmentManufacturer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_equipment_manufacturer");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("integer")
                        .HasColumnName("production_year");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string[]>("WindowsOS")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("windows_os");

                    b.HasKey("Id")
                        .HasName("pk_driver_cores");

                    b.ToTable("driver_cores", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.ExecutableIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_executable_indices");

                    b.ToTable("executable_indices", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.ExploitReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("AppliesTo")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("applies_to");

                    b.Property<string>("DateReported")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("date_reported");

                    b.Property<string>("ExploitID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("exploit_id");

                    b.Property<string>("ReportText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("report_text");

                    b.Property<string>("ReportTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("report_title");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_exploit_reports");

                    b.ToTable("exploit_reports", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.OrderManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string[]>("ApplicationUID")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("application_uid");

                    b.Property<string>("AppxPackagesString")
                        .HasColumnType("text")
                        .HasColumnName("appx_packages_string");

                    b.Property<string>("Arch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("arch");

                    b.Property<bool>("ContinuousDelivery")
                        .HasColumnType("boolean")
                        .HasColumnName("continuous_delivery");

                    b.Property<bool>("ContinuousIntegration")
                        .HasColumnType("boolean")
                        .HasColumnName("continuous_integration");

                    b.Property<string[]>("CustomRegistryKeys")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("custom_registry_keys");

                    b.Property<string>("DownloadLink")
                        .HasColumnType("text")
                        .HasColumnName("download_link");

                    b.Property<string[]>("DriversUID")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("drivers_uid");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("edition");

                    b.Property<string>("ImageOutputFormat")
                        .HasColumnType("text")
                        .HasColumnName("image_output_format");

                    b.Property<string>("Lcid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lcid");

                    b.Property<string>("NotificationEmailAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_email_address");

                    b.Property<string>("OptionalFeatureString")
                        .HasColumnType("text")
                        .HasColumnName("optional_feature_string");

                    b.Property<string>("OrderDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("order_name");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_status");

                    b.Property<string>("Release")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<string>("WindowsDefaultAccount")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("windows_default_account");

                    b.Property<string>("WindowsDefaultPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("windows_default_password");

                    b.HasKey("Id")
                        .HasName("pk_order_managements");

                    b.ToTable("order_managements", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.OriginalEquipmentManufacturerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text")
                        .HasColumnName("contact_person");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("text")
                        .HasColumnName("contact_phone");

                    b.Property<string>("CountryZone")
                        .HasColumnType("text")
                        .HasColumnName("country_zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("OemName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("oem_name");

                    b.Property<string>("OemWebsite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("oem_website");

                    b.Property<string>("OriginalEquipmentManufacturer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_equipment_manufacturer");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("text")
                        .HasColumnName("support_email");

                    b.Property<string>("SupportPhone")
                        .HasColumnType("text")
                        .HasColumnName("support_phone");

                    b.Property<string>("SupportPhoneHours")
                        .HasColumnType("text")
                        .HasColumnName("support_phone_hours");

                    b.Property<string>("SupportWebsite")
                        .HasColumnType("text")
                        .HasColumnName("support_website");

                    b.HasKey("Id")
                        .HasName("pk_original_equipment_manufacturer_contacts");

                    b.ToTable("original_equipment_manufacturer_contacts", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.RegistryKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<int>("RegistryHive")
                        .HasColumnType("integer")
                        .HasColumnName("registry_hive");

                    b.Property<string>("Subkey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subkey");

                    b.Property<string>("ValueData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value_data");

                    b.Property<string>("ValueName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value_name");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer")
                        .HasColumnName("value_type");

                    b.HasKey("Id")
                        .HasName("pk_registry_keys");

                    b.ToTable("registry_keys", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.UninstallProcessIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.HasKey("Id")
                        .HasName("pk_uninstall_process_indices");

                    b.ToTable("uninstall_process_indices", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.VirusTotalScan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<string>("HashScanned")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash_scanned");

                    b.Property<bool>("IsSafe")
                        .HasColumnType("boolean")
                        .HasColumnName("is_safe");

                    b.Property<int>("StatsConfirmedTimeout")
                        .HasColumnType("integer")
                        .HasColumnName("stats_confirmed_timeout");

                    b.Property<int>("StatsFailure")
                        .HasColumnType("integer")
                        .HasColumnName("stats_failure");

                    b.Property<int>("StatsHarmless")
                        .HasColumnType("integer")
                        .HasColumnName("stats_harmless");

                    b.Property<int>("StatsMalicious")
                        .HasColumnType("integer")
                        .HasColumnName("stats_malicious");

                    b.Property<int>("StatsSafetyPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("stats_safety_percentage");

                    b.Property<int>("StatsSuspicious")
                        .HasColumnType("integer")
                        .HasColumnName("stats_suspicious");

                    b.Property<int>("StatsTimeout")
                        .HasColumnType("integer")
                        .HasColumnName("stats_timeout");

                    b.Property<int>("StatsTotalCount")
                        .HasColumnType("integer")
                        .HasColumnName("stats_total_count");

                    b.Property<int>("StatsTypeUnsupported")
                        .HasColumnType("integer")
                        .HasColumnName("stats_type_unsupported");

                    b.Property<int>("StatsUndetected")
                        .HasColumnType("integer")
                        .HasColumnName("stats_undetected");

                    b.Property<string>("Tlsh")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tlsh");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("UriScanId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri_scan_id");

                    b.Property<string>("UriScanned")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uri_scanned");

                    b.Property<string>("Vhash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vhash");

                    b.HasKey("Id")
                        .HasName("pk_virus_total_scans");

                    b.ToTable("virus_total_scans", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.WinRefCore01Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("Release")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("release");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_win_ref_core01releases");

                    b.ToTable("win_ref_core01releases", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.WinRefCore02Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("Edition")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("edition");

                    b.Property<string>("Release")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_win_ref_core02editions");

                    b.ToTable("win_ref_core02editions", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.WinRefCore03Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("edition");

                    b.Property<string>("Release")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string[]>("Version")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_win_ref_core03versions");

                    b.ToTable("win_ref_core03versions", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.WinRefCore04Arch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("Arch")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("arch");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("edition");

                    b.Property<string>("Release")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_win_ref_core04arches");

                    b.ToTable("win_ref_core04arches", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.WinRefCore05Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Arch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("arch");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("edition");

                    b.Property<string[]>("Language")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("language");

                    b.Property<string>("Release")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_win_ref_core05languages");

                    b.ToTable("win_ref_core05languages", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.WindowsCapability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Present")
                        .HasColumnType("boolean")
                        .HasColumnName("present");

                    b.Property<string[]>("SupportedWindowsEditions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_editions");

                    b.Property<string[]>("SupportedWindowsReleases")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_releases");

                    b.Property<string[]>("SupportedWindowsVersions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_versions");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_windows_capabilities");

                    b.ToTable("windows_capabilities", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.WindowsCoreIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Arch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("arch");

                    b.Property<string>("Build")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("build");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("edition");

                    b.Property<string>("Release")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("release");

                    b.Property<string>("SupportedUntil")
                        .HasColumnType("text")
                        .HasColumnName("supported_until");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<string>("WindowsLcid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("windows_lcid");

                    b.HasKey("Id")
                        .HasName("pk_windows_core_identities");

                    b.ToTable("windows_core_identities", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Engine.WindowsOptionalFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("feature_name");

                    b.Property<string[]>("SupportedWindowsEditions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_editions");

                    b.Property<string[]>("SupportedWindowsReleases")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_releases");

                    b.Property<string[]>("SupportedWindowsVersions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_windows_versions");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("pk_windows_optional_features");

                    b.ToTable("windows_optional_features", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Generic.NewsUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleHeading")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("article_heading");

                    b.Property<string>("ArticleImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("article_image");

                    b.Property<string>("ArticleLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("article_link");

                    b.Property<string>("ArticlePreview")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("article_preview");

                    b.HasKey("Id")
                        .HasName("pk_news_updates");

                    b.ToTable("news_updates", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Shared.CountryIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_country_indices");

                    b.ToTable("country_indices", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Shared.CpuArchIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Arch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("arch");

                    b.HasKey("Id")
                        .HasName("pk_cpu_arch_indices");

                    b.ToTable("cpu_arch_indices", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Shared.LcidIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Lcid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lcid");

                    b.HasKey("Id")
                        .HasName("pk_lcid_indices");

                    b.ToTable("lcid_indices", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Shared.Locale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Host")
                        .HasColumnType("text")
                        .HasColumnName("host");

                    b.Property<string>("LookUp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("look_up");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int?>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<int?>("TransferMethod")
                        .HasColumnType("integer")
                        .HasColumnName("transfer_method");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_locales");

                    b.ToTable("locales", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Shared.LocaleIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_code");

                    b.Property<string>("ProviderExt1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_ext1");

                    b.Property<string>("ProviderExt2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_ext2");

                    b.Property<string>("ProviderExt3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_ext3");

                    b.Property<string>("ProviderExt4")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_ext4");

                    b.Property<string>("ProviderPasswd")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_passwd");

                    b.Property<string>("ProviderUID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_uid");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_user_id");

                    b.Property<string>("ProviderXFT")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_xft");

                    b.HasKey("Id")
                        .HasName("pk_locale_indices");

                    b.ToTable("locale_indices", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Shared.PackageDetectionIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.HasKey("Id")
                        .HasName("pk_package_detection_indices");

                    b.ToTable("package_detection_indices", (string)null);
                });

            modelBuilder.Entity("api.engine_v2.Models.Shared.TransferMethodIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.HasKey("Id")
                        .HasName("pk_transfer_method_indices");

                    b.ToTable("transfer_method_indices", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
